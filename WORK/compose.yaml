version: '3.8'
name: template01
services:
  users:
    build:
      context: ./users
      dockerfile: Dockerfile.dev
    volumes:
      - ./users:/code  # Sync local development directory with the container
    depends_on:
        - postgres_dbu
    ports:
      - "8001:8001"  # Expose container port 8000 to host port 8000  
  # notifications:
  #   build:
  #     context: ./notifications
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./notifications:/code  # Sync local development directory with the container
  #   depends_on:
  #       - notifications_db
  #   ports:
  #     - "8003:8002"  # Expose container port 8000 to host port 8000  
  # inventory:
  #   build:
  #     context: ./inventory
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./inventory:/code  # Sync local development directory with the container
  #   depends_on:
  #       - inventory_db
  #   ports:
  #     - "8005:8004"  # Expose container port 8000 to host port 8000
  # orders:
  #   build:
  #     context: ./orders
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./orders:/code  # Sync local development directory with the container
  #   depends_on:
  #       - orders_db
  #   ports:
  #     - "8007:8006"  # Expose container port 8000 to host port 8000
  # payments:
  #   build:
  #     context: ./payments
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - ./payments:/code  # Sync local development directory with the container
  #   depends_on:
  #       - payments_db
  #   ports:
  #     - "8009:8008"  # Expose container port 8000 to host port 8000  
  products:
    build:
      context: ./products
      dockerfile: Dockerfile.dev
    volumes:
      - ./products:/code  # Sync local development directory with the container
    depends_on:
        - postgres_db
    ports:
      - "8000:8000"  # Expose container port 8000 to host port 8000  
  
  postgres_db:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: postgres_db
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5433:5432'
    volumes:  
        - postgres_db:/var/lib/postgresql/data
  postgres_dbu:
    image: postgres:latest  # Use the official PostgreSQL image
    restart: always
    container_name: postgres_dbu
    environment:
        - POSTGRES_USER=ziakhan
        - POSTGRES_PASSWORD=my_password
        - POSTGRES_DB=mydatabase
    ports:
        - '5435:5434'
    volumes:  
        - postgres_dbu:/var/lib/postgresql/data
  # payments_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: payments_db
  #   environment:
  #       - POSTGRES_USER=muhammad
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=paymentsdatabase
  #   ports:
  #       - '5437:5436'
  #   volumes:  
  #       - payments_db:/var/lib/postgresql/data
  # orders_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: orders_db
  #   environment:
  #       - POSTGRES_USER=muhammad
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=ordersdatabase
  #   ports:
  #       - '5439:5438'
  #   volumes:  
  #       - orders_db:/var/lib/postgresql/data
  # notifications_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: notifications_db
  #   environment:
  #       - POSTGRES_USER=muhammad
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=notificationsdatabase
  #   ports:
  #       - '5441:5440'
  #   volumes:  
  #       - notifications_db:/var/lib/postgresql/data
  # inventory_db:
  #   image: postgres:latest  # Use the official PostgreSQL image
  #   restart: always
  #   container_name: inventory_db
  #   environment:
  #       - POSTGRES_USER=muhammad
  #       - POSTGRES_PASSWORD=my_password
  #       - POSTGRES_DB=inventorydatabase
  #   ports:
  #       - '5443:5442'
  #   volumes:  
  #       - inventory_db:/var/lib/postgresql/data
  broker:
    image: apache/kafka:3.7.0
    hostname: broker
    container_name: broker
    ports:
      - '9092:9092'
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker:19092'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@broker:29093'
      KAFKA_LISTENERS: 'CONTROLLER://:29093,PLAINTEXT_HOST://:9092,PLAINTEXT://:19092'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: '4L6g3nShT-eMCtK--X86sw'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local Kafka Cluster'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'broker:19092'
      DYNAMIC_CONFIG_ENABLED: "true"
    depends_on:
      - broker
volumes:
  postgres_db:
    driver: local
  # inventory_db:
  #   driver: local
  # notifications_db:
  #   driver: local
  # orders_db:
  #   driver: local
  # payments_db:
  #   driver: local
  postgres_dbu:
    driver: local
  default:
    driver: bridge
